<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:ModiPrint.Views"
                    xmlns:vc="clr-namespace:ModiPrint.Utilities.IValueConverters"
                    xmlns:ToggleSwitch="clr-namespace:ToggleSwitch;assembly=ToggleSwitch"
                    xmlns:vControl="clr-namespace:ModiPrint.Views.ControlViews"
                    x:Name="GlobalResourceDictionary">
   

    <!--#region Control Parameters-->
    
    <!--Control Height-->
    <System:Double x:Key="StandardControlHeight">35</System:Double>
    <System:Double x:Key="TallControlHeight">80</System:Double>
    <System:Double x:Key="StandardImageButtonHeight">60</System:Double>
    <System:Double x:Key="StandardImageComboBoxHeight">77</System:Double>
    <System:Double x:Key="StandardToggleButtonHeight">35</System:Double>
    <!--Control Width-->
    <System:Double x:Key="NarrowControlWidth">50</System:Double>
    <System:Double x:Key="StandardControlWidth">120</System:Double>
    <System:Double x:Key="WideControlWidth">170</System:Double>
    <System:Double x:Key="ExtraWideControlWidth">220</System:Double>
    <System:Double x:Key="StandardImageComboBoxWidth">270</System:Double>
    <System:Double x:Key="StandardImageComboBoxContentWidth">229</System:Double>
    <System:Double x:Key="StandardToggleButtonWidth">81.7</System:Double>

    <!--Font Parameters-->
    <System:Double x:Key="SmallFontSize">10</System:Double>
    <System:Double x:Key="StandardFontSize">12</System:Double>
    <System:Double x:Key="HeaderControlFontSize">20</System:Double>
    <System:Double x:Key="SuperscriptFontSize">8</System:Double>
    <FontFamily x:Key="HeaderTextFont">Serif</FontFamily>
    <FontFamily x:Key="StandardTextFont">Sans Serif</FontFamily>
    
    <!--Color Parameters-->
    <SolidColorBrush x:Key="StandardBackground">#252525</SolidColorBrush>
    <SolidColorBrush x:Key="StandardForeground">White</SolidColorBrush>
    <SolidColorBrush x:Key="StandardBorder">White</SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryColor">Teal</SolidColorBrush>
    <SolidColorBrush x:Key="SecondaryColor">Aqua</SolidColorBrush>
    <SolidColorBrush x:Key="TertiaryColor">Gold</SolidColorBrush>
    
    <!--ToolTipService Values-->
    <System:Int32 x:Key="ToolTipServiceShowDuration">120000</System:Int32>
    
    <!--#endregion-->
    
    <!--#region Thematic Border-->
    <Style x:Key="ThematicBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2, 2, 2, 2"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="BorderBrush" Value="{StaticResource StandardBorder}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>
    <!--#endregion-->
    
    <!--#region Thematic Button-->
    <Style x:Key="ThematicButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Style.Triggers>
            <!--To Do: Disable button and grey the background if canexecute is false-->
        </Style.Triggers>
    </Style>

    <Style x:Key="ThematicButtonBorder" TargetType="{x:Type Border}" x:Name="ThematicButtonBorder">
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="BorderThickness" Value="3, 3, 3, 3"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="BorderBrush" Value="{StaticResource StandardBorder}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region Thematic Textblock-->
    <Style x:Key="ThematicTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>

    <Style x:Key="ThematicHeaderTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource HeaderTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource HeaderControlFontSize}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>

    <Style x:Key="ThematicToolTipTextBlock" TargetType="{x:Type TextBlock}">
    </Style>
    <!--#endregion-->

    <!--#region Thematic TextBox-->
    <Style x:Key="ThematicTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Background" Value="{StaticResource StandardBackground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{StaticResource StandardForeground}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondaryColor}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TertiaryColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Thematic ComboBox-->
    <Style x:Key="ThematicComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="ThematicComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ThematicComboBoxItem}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="5*"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="5" Background="{StaticResource PrimaryColor}" BorderBrush="{StaticResource StandardBorder}" BorderThickness="3"/>
                                        <Border Grid.Column="0" CornerRadius="5,0,0,5"  Margin="1"  Background="{StaticResource StandardBackground}"  BorderBrush="{StaticResource StandardBorder}" BorderThickness="3"/>
                                        <Path x:Name="Arrow" Grid.Column="1"  Fill="{StaticResource StandardBorder}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SecondaryColor}"/>
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SecondaryColor}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="0, 0, 20, 0"/>
                        <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="False" PopupAnimation="Slide">
                            <Grid  Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{StaticResource StandardBorder}"/>
                                <ScrollViewer SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThematicImageComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ThematicComboBoxItem}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="5*"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="5" Background="{StaticResource PrimaryColor}" BorderBrush="{StaticResource StandardBorder}" BorderThickness="1"/>
                                        <Border Grid.Column="0" CornerRadius="5,0,0,5"  Margin="1"  Background="{StaticResource StandardBackground}"  BorderBrush="{StaticResource StandardBorder}" BorderThickness="1, 1, 1, 1"/>
                                        <Path x:Name="Arrow" Grid.Column="1"  Fill="{StaticResource StandardBorder}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SecondaryColor}"/>
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{StaticResource TertiaryColor}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="0, 0, 40, 0"/>
                        <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="False" PopupAnimation="Slide">
                            <Grid  Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{StaticResource StandardBorder}"/>
                                <ScrollViewer SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region Thematic Control Image-->
    <Style x:Key="ThematicControlImage" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>
    <!--#endregion-->

    <!--#region Thematic Tab Control-->
    <Style x:Key="ThematicTabControlItem" TargetType="{x:Type TabItem}">
        <Style.Resources>
            <Style x:Key="ItemBorder" TargetType="{x:Type Border}" BasedOn="{StaticResource ThematicBorder}">
                <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
                <Setter Property="BorderThickness" Value="5, 5, 5, 5"/>
                <Setter Property="Margin" Value="0, 0, 0, 0"/>
            </Style>

            <Style x:Key="IsSelectedItemBorder" TargetType="{x:Type Border}" BasedOn="{StaticResource ItemBorder}">
                <Setter Property="BorderBrush" Value="{StaticResource TertiaryColor}"/>
            </Style>

            <Style x:Key="IsMouseOverItemBorder" TargetType="{x:Type Border}" BasedOn="{StaticResource ItemBorder}">
                <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
            </Style>
        </Style.Resources>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Name="Border"
                            Style="{StaticResource ItemBorder}">
                        <ContentPresenter ContentSource="Header"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Style" Value="{StaticResource IsSelectedItemBorder}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Border"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Style" Value="{StaticResource IsMouseOverItemBorder}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThematicTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Background" Value="{StaticResource StandardBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ThematicTabControlItem}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>

    <Style x:Key="ThematicTabControlTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ThematicTextBlock}">
        <Setter Property="Margin" Value="0, 0, 0, 0"/>
    </Style>
    <!--#endregion-->

    <!--#region Thematic GroupBox-->
    <Style x:Key="ThematicGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="10, 10, 10, 10"/>
    </Style>
    <!--#endregion-->

    <!--#region Thematic ListView-->
    <Style x:Key="ThematicListView" TargetType="{x:Type ListView}">
        <Style.Resources>
            <AlternationConverter x:Key="BackgroundConverterTealAqua">
                <SolidColorBrush>Teal</SolidColorBrush>
                <SolidColorBrush>DarkTurquoise</SolidColorBrush>
            </AlternationConverter>

            <Style x:Key="ThematicListBoxItem" TargetType="{x:Type ListBoxItem}">
                <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
                <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},
                                                              Path=(ItemsControl.AlternationIndex),
                                                              Converter={StaticResource BackgroundConverterTealAqua}}"/>
            </Style>
        </Style.Resources>

        <Setter Property="Background" Value="{DynamicResource StandardBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource StandardForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource StandardTextFont}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ThematicListBoxItem}"/>
        <Setter Property="Margin" Value="5, 5, 5, 5"/>
    </Style>
    <!--#endregion-->
    
    <!--#region Thematic ToggleButton-->
    <Style x:Key="ThematicToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Height" Value="{StaticResource StandardToggleButtonHeight}"/>
        <Setter Property="Width" Value="{StaticResource StandardToggleButtonWidth}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipServiceShowDuration}"/>
        <Setter Property="Margin" Value="5, 0, 5, 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!--Left-->
                    <vControl:OpaqueClickableImage Source="/Resources/ToggleButtons/Left.png"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Left Mouse Over-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <vControl:OpaqueClickableImage Source="/Resources/ToggleButtons/LeftMouseOver.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!--Right-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked"  Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <vControl:OpaqueClickableImage Source="/Resources/ToggleButtons/Right.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!--Right Mouse Over-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <vControl:OpaqueClickableImage Source="/Resources/ToggleButtons/RightMouseOver.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>

    </Style>
    <!--#endregion-->
    
    <!--#region ScrollViewer-->
    <!--Based off of https://stackoverflow.com/questions/37095415/wpf-scrollbar-styles-->
    <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
    <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
    <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="NormalBrush" Color="#888" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="Black" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="1" CornerRadius="2"
                            Background="{StaticResource StandardBackground}"
                            BorderBrush="{StaticResource StandardForeground}"
                            BorderThickness="1">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center"
                              Fill="{StaticResource GlyphBrush}" 
                              Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Black" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0" 
                            Width="8"
                            Margin="8,0,-2,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="0"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="0"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3"
                    CornerRadius="2"
                    Background="Transparent"/>
            <RepeatButton Grid.Row="0"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18" Command="ScrollBar.LineUpCommand"
                          Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                           Margin="1,0,1,0"
                           Background="{StaticResource StandardForeground}"
                           BorderBrush="{StaticResource StandardForeground}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18"
                          Command="ScrollBar.LineDownCommand"
                          Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3"
                    CornerRadius="2"
                    Background="#F0F0F0" />
            <RepeatButton Grid.Column="0"
                          Style="{StaticResource ScrollBarLineButton}"
                          Width="18" 
                          Command="ScrollBar.LineLeftCommand"
                          Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track"
                   Grid.Column="1"
                   IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton
                        Style="{StaticResource ScrollBarPageButton}"
                        Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                           Margin="0,1,0,1"
                           Background="{StaticResource StandardForeground}"
                           BorderBrush="{StaticResource StandardForeground}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3"
                          Style="{StaticResource ScrollBarLineButton}"
                          Width="18"
                          Command="ScrollBar.LineRightCommand"
                          Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThematicScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="1"/>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Grid.Column="1" HorizontalAlignment="Right"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1" Grid.Column="1"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
   
</ResourceDictionary>